<?php
/**
 * This file is a part of Mail project.
 *
 * (c) Andrey Kolchenko <andrey@kolchenko.me>
 */

namespace Fetch;

/**
 * Class Mail
 *
 * @package Fetch
 * @author Andrey Kolchenko <andrey@kolchenko.me>
 */
class Mail extends Message
{
    /**
     * This returns the subject of the message.
     *
     * @return string
     */
    public function getRawSubject()
    {
        return $this->subject;
    }

    /**
     * Return decoded subject of the message.
     *
     * @return string
     */
    public function getSubject()
    {
        if (empty($this->subject)) {
            return '';
        } else {
            $decoded = imap_mime_header_decode($this->subject);
            if (empty($decoded[0])) {
                return '';
            } else {
                return $decoded[0]->text;
            }
        }
    }

    /**
     * Get carbon copy.
     * A list of more recipients that will be seen by all other recipients.
     *
     * @return Address[]
     */
    public function getCc()
    {
        return $this->cc;
    }

    /**
     * The senders email address.
     *
     * @return Address[]
     */
    public function getFrom()
    {
        return $this->from;
    }

    /**
     * The email address where replies should be sent to.
     *
     * @return Address[]
     */
    public function getReplyTo()
    {
        return $this->replyTo;
    }

    /**
     * A list of recipient emails.
     *
     * @return Address[]
     */
    public function getTo()
    {
        return $this->to;
    }

    /**
     * This function takes in an array of the address objects generated by the message headers and turns them into an
     * associative array.
     *
     * @param array $addresses
     *
     * @return Address[]
     */
    protected function processAddressObject($addresses)
    {
        $output_addresses = array();
        if (is_array($addresses)) {
            foreach ($addresses as $address) {
                $current_address = new Address($address->mailbox . '@' . $address->host);
                if (isset($address->personal)) {
                    $current_address->setName($address->personal);
                }
                array_push($output_addresses, $current_address);
            }
        }

        return $output_addresses;
    }

}